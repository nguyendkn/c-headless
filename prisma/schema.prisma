generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model AuditInfo {
  id                String             @id @default(cuid())
  createdBy         String?            @map("created_by")
  updatedBy         String?            @map("updated_by")
  clientIp          String?            @map("client_ip")
  userAgent         String?            @map("user_agent")
  aiAgents          AIAgent[]
  aiModels          AIModel[]
  aiPrompts         AIPrompt[]
  aiProviderConfigs AIProviderConfig[]
  aiUsage           AIUsage[]
  aiWorkflows       AIWorkflow[]
  costBudgets       CostBudget[]
  entities          Entity[]
  mcpServers        MCPServer[]
  projects          Project[]
  tables            Table[]
  templates         Template[]

  @@map("audit_info")
}

model Project {
  id           String       @id @default(cuid())
  name         String       @unique
  title        String
  description  String?
  config       Json         @default("{}")
  permissions  Json?
  settings     Json?
  integrations Json?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  version      Int          @default(1)
  metadata     Json?
  auditId      String?      @map("audit_id")
  deletedAt    DateTime?    @map("deleted_at")
  deletedBy    String?      @map("deleted_by")
  dataSources  DataSource[]
  features     Feature[]
  filters      Filter[]
  forms        Form[]
  audit        AuditInfo?   @relation(fields: [auditId], references: [id])
  reports      Report[]
  tables       Table[]
  views        View[]
  webhooks     Webhook[]

  @@map("projects")
}

model Table {
  id            String              @id @default(cuid())
  name          String
  label         String
  description   String?
  config        Json                @default("{}")
  permissions   Json?
  display       Json?
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  version       Int                 @default(1)
  metadata      Json?
  auditId       String?             @map("audit_id")
  deletedAt     DateTime?           @map("deleted_at")
  deletedBy     String?             @map("deleted_by")
  status        String              @default("draft")
  publishedAt   DateTime?           @map("published_at")
  publishedBy   String?             @map("published_by")
  projectId     String              @map("project_id")
  entities      Entity[]
  fields        Field[]
  filters       Filter[]
  forms         Form[]
  reports       Report[]
  indexes       TableIndex[]
  relationships TableRelationship[]
  audit         AuditInfo?          @relation(fields: [auditId], references: [id])
  project       Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  views         View[]

  @@unique([projectId, name])
  @@map("tables")
}

model TableIndex {
  id        String   @id @default(cuid())
  name      String
  type      String
  fields    String[]
  unique    Boolean  @default(false)
  partial   Boolean  @default(false)
  condition String?
  comment   String?
  tableId   String   @map("table_id")
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@map("table_indexes")
}

model TableRelationship {
  id            String   @id @default(cuid())
  name          String
  relatedTable  String   @map("related_table")
  type          String
  localField    String[] @map("local_field")
  foreignField  String[] @map("foreign_field")
  joinTable     String?  @map("join_table")
  cascadeDelete Boolean  @default(false) @map("cascade_delete")
  constraints   Json?
  tableId       String   @map("table_id")
  table         Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@map("table_relationships")
}

model Field {
  id           String   @id @default(cuid())
  name         String
  label        String
  type         String
  inputType    String?  @map("input_type")
  description  String?
  required     Boolean  @default(false)
  unique       Boolean  @default(false)
  indexed      Boolean  @default(false)
  defaultValue Json?    @map("default_value")
  validation   Json?
  options      Json?
  relationship Json?
  constraints  Json?
  display      Json?
  system       Boolean  @default(false)
  encrypted    Boolean  @default(false)
  permissions  Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  version      Int      @default(1)
  metadata     Json?
  tableId      String   @map("table_id")
  table        Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@map("fields")
}

model Entity {
  id            String             @id @default(cuid())
  name          String?
  description   String?
  data          Json               @default("{}")
  relationships Json?
  tags          String[]
  permissions   Json?
  validation    Json?
  workflowState String?            @map("workflow_state")
  priority      Int?
  status        String             @default("active")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  version       Int                @default(1)
  metadata      Json?
  auditId       String?            @map("audit_id")
  deletedAt     DateTime?          @map("deleted_at")
  deletedBy     String?            @map("deleted_by")
  locale        String             @default("en")
  originalId    String?            @map("original_id")
  tableId       String             @map("table_id")
  audit         AuditInfo?         @relation(fields: [auditId], references: [id])
  table         Table              @relation(fields: [tableId], references: [id], onDelete: Cascade)
  activities    EntityActivity[]
  attachments   EntityAttachment[]
  comments      EntityComment[]
  history       EntityHistory[]

  @@map("entities")
}

model EntityHistory {
  id             String   @id @default(cuid())
  changeType     String   @map("change_type")
  changedFields  String[] @map("changed_fields")
  previousValues Json?    @map("previous_values")
  newValues      Json?    @map("new_values")
  reason         String?
  changedBy      String   @map("changed_by")
  changedAt      DateTime @map("changed_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  version        Int      @default(1)
  metadata       Json?
  entityId       String   @map("entity_id")
  tableId        String   @map("table_id")
  entity         Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("entity_history")
}

model EntityComment {
  id          String          @id @default(cuid())
  content     String
  author      String
  parentId    String?         @map("parent_id")
  mentions    String[]
  attachments Json?
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  version     Int             @default(1)
  metadata    Json?
  entityId    String          @map("entity_id")
  tableId     String          @map("table_id")
  entity      Entity          @relation(fields: [entityId], references: [id], onDelete: Cascade)
  parent      EntityComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     EntityComment[] @relation("CommentReplies")

  @@map("entity_comments")
}

model EntityAttachment {
  id          String   @id @default(cuid())
  file        Json
  description String?
  category    String?
  uploadedBy  String   @map("uploaded_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  version     Int      @default(1)
  metadata    Json?
  entityId    String   @map("entity_id")
  tableId     String   @map("table_id")
  entity      Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("entity_attachments")
}

model EntityActivity {
  id           String   @id @default(cuid())
  activityType String   @map("activity_type")
  description  String?
  userId       String   @map("user_id")
  timestamp    DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  version      Int      @default(1)
  metadata     Json?
  entityId     String   @map("entity_id")
  tableId      String   @map("table_id")
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@map("entity_activities")
}

model View {
  id           String   @id @default(cuid())
  name         String
  title        String
  description  String?
  type         String
  config       Json     @default("{}")
  permissions  Json?
  filters      Json?
  sorting      Json?
  grouping     Json?
  aggregations Json?
  public       Boolean  @default(false)
  default      Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  version      Int      @default(1)
  metadata     Json?
  projectId    String   @map("project_id")
  tableId      String   @map("table_id")
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  table        Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@map("views")
}

model Form {
  id          String   @id @default(cuid())
  name        String
  description String?
  method      String
  action      String?
  fields      Json     @default("[]")
  validation  Json?
  layout      Json?
  submission  Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  version     Int      @default(1)
  metadata    Json?
  projectId   String   @map("project_id")
  tableId     String?  @map("table_id")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  table       Table?   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("forms")
}

model Filter {
  id            String   @id @default(cuid())
  name          String
  title         String
  description   String?
  conditions    Json     @default("[]")
  logic         Json?
  defaultActive Boolean  @default(false) @map("default_active")
  public        Boolean  @default(false)
  category      String?
  tags          String[]
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  version       Int      @default(1)
  metadata      Json?
  projectId     String   @map("project_id")
  tableId       String   @map("table_id")
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  table         Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, name])
  @@map("filters")
}

model FilterPreset {
  id          String    @id @default(cuid())
  name        String
  description String?
  filter      Json
  public      Boolean   @default(false)
  category    String?
  usageCount  Int       @default(0) @map("usage_count")
  lastUsed    DateTime? @map("last_used")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  version     Int       @default(1)
  metadata    Json?
  tableId     String    @map("table_id")

  @@map("filter_presets")
}

model Report {
  id             String   @id @default(cuid())
  name           String
  title          String
  description    String?
  category       String?
  tags           String[]
  dataSources    Json     @default("[]") @map("data_sources")
  sections       Json     @default("[]")
  parameters     Json?
  filters        Json?
  permissions    Json?
  schedule       Json?
  exportSettings Json?    @map("export_settings")
  public         Boolean  @default(false)
  layout         Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  version        Int      @default(1)
  metadata       Json?
  projectId      String   @map("project_id")
  tableId        String?  @map("table_id")
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  table          Table?   @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Feature {
  id             String    @id @default(cuid())
  name           String
  title          String
  description    String?
  category       String?
  type           String
  config         Json      @default("{}")
  enabled        Boolean   @default(true)
  dependencies   String[]
  permissions    Json?
  settings       Json?
  featureVersion String?   @map("feature_version")
  author         String?
  tags           String[]
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  version        Int       @default(1)
  metadata       Json?
  deletedAt      DateTime? @map("deleted_at")
  deletedBy      String?   @map("deleted_by")
  projectId      String    @map("project_id")
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, name])
  @@map("features")
}

model AIModel {
  id           String       @id @default(cuid())
  name         String       @unique
  displayName  String       @map("display_name")
  description  String?
  provider     String
  modelId      String       @map("model_id")
  modelVersion String?      @map("model_version")
  capabilities Json         @default("{}")
  config       Json         @default("{}")
  pricing      Json?
  active       Boolean      @default(true)
  tags         String[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  version      Int          @default(1)
  metadata     Json?
  auditId      String?      @map("audit_id")
  agents       AIAgent[]
  audit        AuditInfo?   @relation(fields: [auditId], references: [id])
  prompts      AIPrompt[]
  usage        AIUsage[]
  workflows    AIWorkflow[]

  @@map("ai_models")
}

model AIProviderConfig {
  id              String     @id @default(cuid())
  provider        String
  name            String
  description     String?
  config          Json       @default("{}")
  models          String[]
  status          String     @default("active")
  lastHealthCheck DateTime?  @map("last_health_check")
  priority        Int?
  rateLimit       Json?      @map("rate_limit")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  version         Int        @default(1)
  metadata        Json?
  auditId         String?    @map("audit_id")
  audit           AuditInfo? @relation(fields: [auditId], references: [id])

  @@unique([provider, name])
  @@map("ai_provider_configs")
}

model AIAgent {
  id            String       @id @default(cuid())
  name          String       @unique
  displayName   String       @map("display_name")
  description   String?
  type          String
  config        Json         @default("{}")
  capabilities  Json         @default("{}")
  permissions   Json?
  status        String       @default("active")
  tags          String[]
  parentAgentId String?      @map("parent_agent_id")
  childAgents   String[]     @map("child_agents")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  version       Int          @default(1)
  metadata      Json?
  auditId       String?      @map("audit_id")
  deletedAt     DateTime?    @map("deleted_at")
  deletedBy     String?      @map("deleted_by")
  modelId       String       @map("model_id")
  audit         AuditInfo?   @relation(fields: [auditId], references: [id])
  model         AIModel      @relation(fields: [modelId], references: [id])
  parentAgent   AIAgent?     @relation("AgentHierarchy", fields: [parentAgentId], references: [id])
  children      AIAgent[]    @relation("AgentHierarchy")
  prompts       AIPrompt[]
  usage         AIUsage[]
  workflows     AIWorkflow[]

  @@map("ai_agents")
}

model AIWorkflow {
  id          String              @id @default(cuid())
  name        String
  description String?
  type        String
  steps       Json                @default("[]")
  config      Json                @default("{}")
  triggers    Json?
  status      String              @default("draft")
  permissions Json?
  tags        String[]
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  version     Int                 @default(1)
  metadata    Json?
  auditId     String?             @map("audit_id")
  deletedAt   DateTime?           @map("deleted_at")
  deletedBy   String?             @map("deleted_by")
  modelId     String?             @map("model_id")
  agentId     String?             @map("agent_id")
  agent       AIAgent?            @relation(fields: [agentId], references: [id])
  audit       AuditInfo?          @relation(fields: [auditId], references: [id])
  model       AIModel?            @relation(fields: [modelId], references: [id])
  executions  WorkflowExecution[]

  @@map("ai_workflows")
}

model AIPrompt {
  id          String          @id @default(cuid())
  name        String
  description String?
  category    String?
  content     String
  variables   Json?
  config      Json            @default("{}")
  permissions Json?
  tags        String[]
  usageStats  Json?           @map("usage_stats")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  version     Int             @default(1)
  metadata    Json?
  auditId     String?         @map("audit_id")
  deletedAt   DateTime?       @map("deleted_at")
  deletedBy   String?         @map("deleted_by")
  modelId     String?         @map("model_id")
  agentId     String?         @map("agent_id")
  agent       AIAgent?        @relation(fields: [agentId], references: [id])
  audit       AuditInfo?      @relation(fields: [auditId], references: [id])
  model       AIModel?        @relation(fields: [modelId], references: [id])
  versions    PromptVersion[]

  @@map("ai_prompts")
}

model AIUsage {
  id        String     @id @default(cuid())
  userId    String?    @map("user_id")
  agentId   String?    @map("agent_id")
  provider  String
  type      String
  tokens    Json?
  request   Json?
  response  Json?
  cost      Json?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  version   Int        @default(1)
  metadata  Json?
  auditId   String?    @map("audit_id")
  modelId   String     @map("model_id")
  agent     AIAgent?   @relation(fields: [agentId], references: [id])
  audit     AuditInfo? @relation(fields: [auditId], references: [id])
  model     AIModel    @relation(fields: [modelId], references: [id])

  @@map("ai_usage")
}

model CostBudget {
  id          String     @id @default(cuid())
  name        String
  description String?
  amount      Float
  currency    String
  period      String
  scope       Json
  alerts      Json?
  status      String     @default("active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  version     Int        @default(1)
  metadata    Json?
  auditId     String?    @map("audit_id")
  audit       AuditInfo? @relation(fields: [auditId], references: [id])

  @@map("cost_budgets")
}

model Template {
  id              String     @id @default(cuid())
  name            String
  title           String
  description     String?
  type            String
  category        String?
  tags            String[]
  rootComponent   Json       @map("root_component")
  config          Json       @default("{}")
  permissions     Json?
  validation      Json?
  published       Boolean    @default(false)
  templateVersion String?    @map("template_version")
  previewImage    String?    @map("preview_image")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  version         Int        @default(1)
  metadata        Json?
  auditId         String?    @map("audit_id")
  deletedAt       DateTime?  @map("deleted_at")
  deletedBy       String?    @map("deleted_by")
  audit           AuditInfo? @relation(fields: [auditId], references: [id])

  @@map("templates")
}

model MCPServer {
  id              String     @id @default(cuid())
  name            String     @unique
  description     String?
  endpoint        String
  transport       String
  capabilities    Json       @default("{}")
  config          Json       @default("{}")
  status          String     @default("active")
  lastHealthCheck DateTime?  @map("last_health_check")
  serverVersion   String?    @map("server_version")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  version         Int        @default(1)
  metadata        Json?
  auditId         String?    @map("audit_id")
  audit           AuditInfo? @relation(fields: [auditId], references: [id])

  @@map("mcp_servers")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  category    String?
  encrypted   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  version     Int      @default(1)
  metadata    Json?

  @@map("system_configs")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  sessionId String   @unique @map("session_id")
  data      Json     @default("{}")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ValidationResult {
  id        String   @id @default(cuid())
  valid     Boolean
  errors    String[]
  warnings  String[]
  context   String?
  entityId  String?  @map("entity_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  version   Int      @default(1)
  metadata  Json?

  @@map("validation_results")
}

model User {
  id          String        @id @default(cuid())
  email       String        @unique
  name        String
  password    String
  status      String        @default("active")
  lastLoginAt DateTime?     @map("last_login_at")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  apiKeys     APIKey[]
  roles       UserRole[]
  sessions    UserSession[]

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  displayName String     @map("display_name")
  description String?
  permissions String[]
  system      Boolean    @default(false)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  version     Int        @default(1)
  metadata    Json?
  users       UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  resource    String
  action      String
  system      Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  version     Int      @default(1)
  metadata    Json?

  @@unique([resource, action])
  @@map("permissions")
}

model APIKey {
  id          String    @id @default(cuid())
  name        String
  keyHash     String    @unique @map("key_hash")
  keyPrefix   String    @map("key_prefix")
  permissions String[]
  expiresAt   DateTime? @map("expires_at")
  lastUsedAt  DateTime? @map("last_used_at")
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  version     Int       @default(1)
  metadata    Json?
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  resource   String
  resourceId String?  @map("resource_id")
  userId     String?  @map("user_id")
  sessionId  String?  @map("session_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  changes    Json?
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  success    Boolean  @default(true)
  errorMsg   String?  @map("error_message")
  createdAt  DateTime @default(now()) @map("created_at")
  metadata   Json?

  @@index([resource, resourceId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model FileStorage {
  id         String   @id @default(cuid())
  filename   String
  storedName String   @unique @map("stored_name")
  mimeType   String   @map("mime_type")
  size       Int
  path       String
  bucket     String?
  url        String?
  checksum   String?
  uploadedBy String   @map("uploaded_by")
  category   String?
  tags       String[]
  metadata   Json?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  version    Int      @default(1)

  @@index([uploadedBy])
  @@index([category])
  @@index([mimeType])
  @@map("file_storage")
}

model DataSource {
  id          String    @id @default(cuid())
  name        String    @unique
  displayName String    @map("display_name")
  description String?
  type        String
  config      Json      @default("{}")
  credentials Json?
  status      String    @default("active")
  lastSync    DateTime? @map("last_sync")
  syncStatus  String?   @map("sync_status")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  version     Int       @default(1)
  metadata    Json?
  projectId   String    @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("data_sources")
}

model WorkflowExecution {
  id          String     @id @default(cuid())
  workflowId  String     @map("workflow_id")
  status      String     @default("pending")
  startedAt   DateTime?  @map("started_at")
  completedAt DateTime?  @map("completed_at")
  triggeredBy String?    @map("triggered_by")
  triggerData Json?      @map("trigger_data")
  currentStep String?    @map("current_step")
  stepResults Json?      @map("step_results")
  errorMsg    String?    @map("error_message")
  retryCount  Int        @default(0) @map("retry_count")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  version     Int        @default(1)
  metadata    Json?
  workflow    AIWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
  @@map("workflow_executions")
}

model PromptVersion {
  id        String   @id @default(cuid())
  promptId  String   @map("prompt_id")
  version   String
  content   String
  variables Json?
  config    Json?
  changelog String?
  active    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  metadata  Json?
  prompt    AIPrompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, version])
  @@index([promptId, active])
  @@map("prompt_versions")
}

model ComponentLibrary {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  version     String   @default("1.0.0")
  components  Json     @default("[]")
  category    String?
  tags        String[]
  public      Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  version_num Int      @default(1) @map("version_num")
  metadata    Json?

  @@map("component_libraries")
}

model Notification {
  id        String    @id @default(cuid())
  title     String
  message   String
  type      String    @default("info")
  userId    String?   @map("user_id")
  channel   String    @default("app")
  status    String    @default("pending")
  readAt    DateTime? @map("read_at")
  sentAt    DateTime? @map("sent_at")
  data      Json?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  metadata  Json?

  @@index([userId, status])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

model Webhook {
  id         String            @id @default(cuid())
  name       String
  url        String
  events     String[]
  secret     String?
  headers    Json?
  active     Boolean           @default(true)
  retryCount Int               @default(3) @map("retry_count")
  timeout    Int               @default(30)
  createdAt  DateTime          @default(now()) @map("created_at")
  updatedAt  DateTime          @updatedAt @map("updated_at")
  version    Int               @default(1)
  metadata   Json?
  projectId  String?           @map("project_id")
  deliveries WebhookDelivery[]
  project    Project?          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model WebhookDelivery {
  id         String    @id @default(cuid())
  webhookId  String    @map("webhook_id")
  event      String
  payload    Json
  response   Json?
  status     String
  statusCode Int?      @map("status_code")
  attempts   Int       @default(1)
  nextRetry  DateTime? @map("next_retry")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  webhook    Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, status])
  @@index([event])
  @@map("webhook_deliveries")
}

model CacheEntry {
  id        String    @id @default(cuid())
  key       String    @unique
  value     Json
  ttl       Int?
  expiresAt DateTime? @map("expires_at")
  tags      String[]
  size      Int?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([expiresAt])
  @@index([tags])
  @@map("cache_entries")
}

model SearchIndex {
  id         String   @id @default(cuid())
  entityType String   @map("entity_type")
  entityId   String   @map("entity_id")
  content    String
  title      String?
  summary    String?
  keywords   String[]
  boost      Float    @default(1.0)
  language   String   @default("en")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([entityType, entityId])
  @@index([entityType])
  @@index([keywords])
  @@map("search_indexes")
}

model AnalyticsEvent {
  id         String   @id @default(cuid())
  event      String
  userId     String?  @map("user_id")
  sessionId  String?  @map("session_id")
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  properties Json?
  timestamp  DateTime @default(now())
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")

  @@index([event])
  @@index([userId])
  @@index([timestamp])
  @@index([entityType, entityId])
  @@map("analytics_events")
}

model BackupJob {
  id          String    @id @default(cuid())
  name        String
  type        String
  status      String    @default("pending")
  startedAt   DateTime? @map("started_at")
  completedAt DateTime? @map("completed_at")
  size        Int?
  location    String?
  checksum    String?
  errorMsg    String?   @map("error_message")
  config      Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  metadata    Json?

  @@index([status])
  @@index([startedAt])
  @@map("backup_jobs")
}

model Migration {
  id          String    @id @default(cuid())
  name        String    @unique
  version     String
  description String?
  up_sql      String    @map("up_sql")
  down_sql    String?   @map("down_sql")
  checksum    String
  appliedAt   DateTime? @map("applied_at")
  appliedBy   String?   @map("applied_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  metadata    Json?

  @@index([version])
  @@index([appliedAt])
  @@map("migrations")
}
